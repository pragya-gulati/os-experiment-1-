def sjf_non_preemptive(processes):
    # Sort processes by Arrival Time and Burst Time
    processes.sort(key=lambda x: (x['arrival_time'], x['burst_time']))
    
    n = len(processes)
    completed = 0
    current_time = 0
    waiting_time = [0] * n
    turnaround_time = [0] * n
    is_completed = [False] * n
    
    while completed != n:
        # Find process with shortest burst time that has arrived
        idx = -1
        min_burst_time = float('inf')
        for i in range(n):
            if (processes[i]['arrival_time'] <= current_time and
                not is_completed[i] and
                processes[i]['burst_time'] < min_burst_time):
                min_burst_time = processes[i]['burst_time']
                idx = i
        
        if idx != -1:
            # Process the selected process
            current_time += processes[idx]['burst_time']
            turnaround_time[idx] = current_time - processes[idx]['arrival_time']
            waiting_time[idx] = turnaround_time[idx] - processes[idx]['burst_time']
            is_completed[idx] = True
            completed += 1
        else:
            # If no process has arrived, increment current_time
            current_time += 1

    # Calculate Average Waiting and Turnaround Time
    avg_waiting_time = sum(waiting_time) / n
    avg_turnaround_time = sum(turnaround_time) / n

    # Display Process Details
    print("Process\tArrival\tBurst\tWaiting\tTurnaround")
    for i in range(n):
        print(f"P{i+1}\t{processes[i]['arrival_time']}\t{process
