import java.util.concurrent.Semaphore;

class DiningPhilosophers {

    // Number of philosophers
    private static final int NUM_PHILOSOPHERS = 5;

    // Semaphore for forks
    private static Semaphore[] forks = new Semaphore[NUM_PHILOSOPHERS];

    static {
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            forks[i] = new Semaphore(1); // Each fork is initialized as available
        }
    }

    static class Philosopher implements Runnable {
        private int id;

        Philosopher(int id) {
            this.id = id;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    think();
                    pickUpForks();
                    eat();
                    putDownForks();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        private void think() throws InterruptedException {
            System.out.println("Philosopher " + id + " is thinking.");
            Thread.sleep((long) (Math.random() * 1000));
        }

        private void pickUpForks() throws InterruptedException {
            // Pick up the left fork
            forks[id].acquire();
            System.out.println("Philosopher " + id + " picked up left fork " + id);

            // Pick up the right fork
            forks[(id + 1) % NUM_PHILOSOPHERS].acquire();
            System.out.println("Philosopher " + id + " picked up right fork " + (id + 1) % NUM_PHILOSOPHERS);
        }

        private void eat() throws InterruptedException {
            System.out.println("Philosopher " + id + " is eating.");
            Thread.sleep((long) (Math.random() * 1000));
        }

        private void putDownForks() {
            // Put down the left fork
            forks[id].release();
            System.out.println("Philosopher " + id + " put down left fork " + id);

            // Put down the right fork
            forks[(id + 1) % NUM_PHILOSOPHERS].release();
            System.out.println("Philosopher " + id + " put down right fork " + (id + 1) % NUM_PHILOSOPHERS);
        }
    }

    public static void main(String[] args) {
        // Create and start philosopher threads
        Thread[] philosophers = new Thread[NUM_PHILOSOPHERS];
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            philosophers[i] = new Thread(new Philosopher(i), "Philosopher " + i);
            philosophers[i].start();
        }
    }
}
